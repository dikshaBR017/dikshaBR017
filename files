#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct employee_t 
{
    int id;
    char name[200];
    float salary;
    char department[100];
};

typedef struct employee_t Employee;

void readEmployees(Employee *emp, int n);
void displayEmployees(Employee *emp, int n);
void saveEmployee(Employee *emp, int n);
Employee findHighestSalaried(Employee *emp, int n);

int main() 
{
    int employeeCount;

    // Input validation for employee count
    printf("Enter number of employees: ");
    if (scanf("%d", &employeeCount) != 1 || employeeCount <= 0) {
        printf("Invalid number of employees.\n");
        return 1; // Exit with error code
    }

    // Dynamic memory allocation for employees
    Employee *employees = malloc(employeeCount * sizeof(Employee));
    if (employees == NULL) {
        perror("Failed to allocate memory");
        return 1; // Exit with error code
    }

    readEmployees(employees, employeeCount);
    displayEmployees(employees, employeeCount);
    
    Employee highestSalaried = findHighestSalaried(employees, employeeCount);
    printf("\nEmployee with highest salary: %s, %.2f (%s)\n", highestSalaried.name, highestSalaried.salary, highestSalaried.department);
    
    // Save employee details to a file
    saveEmployee(employees, employeeCount);
    
    // Free allocated memory
    free(employees);
    
    return 0;
}

void readEmployees(Employee *emp, int n) 
{
    for (int i = 0; i < n; i++) 
    {
        printf("Enter details for employee %d:\n", i + 1);
        
        printf("ID: ");
        while (scanf("%d", &emp[i].id) != 1) {
            printf("Invalid input. Please enter a valid ID: ");
            while (getchar() != '\n'); // Clear invalid input
        }
        
        printf("Name: ");
        scanf(" %199[^\n]", emp[i].name);
        
        printf("Salary: ");
        while (scanf("%f", &emp[i].salary) != 1) {
            printf("Invalid input. Please enter a valid salary: ");
            while (getchar() != '\n'); // Clear invalid input
        }
        
        printf("Department: ");
        scanf(" %99[^\n]", emp[i].department);
    }
}

void displayEmployees(Employee *emp, int n) 
{
    printf("\nEmployee Details:\n\n");
    for (int i = 0; i < n; i++) 
    {
        printf("ID: %d, Name: %s, Salary: %.2f, Department: %s\n", emp[i].id, emp[i].name, emp[i].salary, emp[i].department);
    }
}

void saveEmployee(Employee *emp, int n)
{
    FILE* file = fopen("employee.txt", "w");
    if (file == NULL)
    {
        perror("Error opening file");
        return;
    }
    
    for (int i = 0; i < n; i++)
    {
        fprintf(file, "%d %s %.2f %s\n", emp[i].id, emp[i].name, emp[i].salary, emp[i].department);
    }
    
    fclose(file);
}

Employee findHighestSalaried(Employee *emp, int n) 
{
    Employee highest = emp[0];
    for (int i = 1; i < n; i++) 
    {
        if (emp[i].salary > highest.salary) {
            highest = emp[i];
        }
    }
    return highest;
}
