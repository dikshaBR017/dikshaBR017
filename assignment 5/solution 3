#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the structure for a patient
typedef struct Patient {
    int id;
    char name[50];
    struct Patient *prev;
    struct Patient *next;
} Patient;

// Define the structure for the hospital management system
typedef struct Hospital {
    Patient *head;
    Patient *tail;
} Hospital;

// Function to initialize the hospital
void initHospital(Hospital *hospital) {
    hospital->head = NULL;
    hospital->tail = NULL;
}

// Function to create a new patient
Patient* createPatient(int id, const char *name) {
    Patient *new_patient = (Patient *)malloc(sizeof(Patient));
    new_patient->id = id;
    strcpy(new_patient->name, name);
    new_patient->prev = NULL;
    new_patient->next = NULL;
    return new_patient;
}

// Function to add a new patient
void addPatient(Hospital *hospital, int id, const char *name) {
    Patient *new_patient = createPatient(id, name);
    if (hospital->head == NULL) {
        // If the list is empty, set head and tail to the new patient
        hospital->head = new_patient;
        hospital->tail = new_patient;
    } else {
        // Add the new patient to the end of the list
        hospital->tail->next = new_patient;
        new_patient->prev = hospital->tail;
        hospital->tail = new_patient;
    }
    printf("New Patient Admitted: %s (ID %d)\n", name, id);
}

// Function to discharge a patient
void dischargePatient(Hospital *hospital, int id) {
    Patient *current = hospital->head;
    while (current != NULL) {
        if (current->id == id) {
            // Found the patient to discharge
            if (current->prev != NULL) {
                current->prev->next = current->next;
            } else {
                // Discharging the head
                hospital->head = current->next;
            }
            if (current->next != NULL) {
                current->next->prev = current->prev;
            } else {
                // Discharging the tail
                hospital->tail = current->prev;
            }
            printf("Discharging: %s\n", current->name);
            free(current);
            return;
        }
        current = current->next;
    }
    printf("Patient with ID %d not found.\n", id);
}

// Function to display remaining patients
void displayPatients(Hospital *hospital) {
    Patient *current = hospital->head;
    if (current == NULL) {
        printf("No remaining patients.\n");
        return;
    }
    printf("Remaining Patients: ");
    while (current != NULL) {
        printf("%s (ID %d)", current->name, current->id);
        if (current->next != NULL) {
            printf(" â†” ");
        }
        current = current->next;
    }
    printf("\n");
}

// Main function to demonstrate the patient management system
int main() {
    Hospital hospital;
    initHospital(&hospital);
    
    // Adding new patients
    addPatient(&hospital, 201, "John");
    addPatient(&hospital, 202, "Mary");
    addPatient(&hospital, 203, "David");
    
    // Discharging a patient
    dischargePatient(&hospital, 202); // Discharging Mary
    
    // Display remaining patients
    displayPatients(&hospital);
    
    return 0;
}
